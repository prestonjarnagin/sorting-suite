const assert = require('chai').assert
const quickSort = require('../quickSort')

describe('Sort numbers',  function(){
  it('Quick sort can sort first array of numbers',  function(){
      var unsorted = [4, 1, 3]
      var sorted = [1, 3, 4]

      subject = quickSort(unsorted)

      assert.deepEqual(sorted,  subject)
  })

  it('Quick sort can sort second array of numbers',  function(){
      var unsorted = [1, 3, 2, 5]
      var sorted = [1, 2, 3, 5]

      subject = quickSort(unsorted)

      assert.deepEqual(sorted,  subject)
  })

  it('Quick sort can sort third array of numbers',  function(){
      var unsorted = [6, 1, 3, 9, 10, 20, 4]
      var sorted = [1, 3, 4, 6, 9, 10, 20]

      subject = quickSort(unsorted)

      assert.deepEqual(sorted,  subject)
  })

  it('Quick sort can sort forth array of numbers',  function(){
      var unsorted = [7, 6, 11, 1, 7, 10, 1, 11, 4]
      var sorted = [1, 1, 4, 6, 7, 7, 10, 11, 11]

      subject = quickSort(unsorted)

      assert.deepEqual(sorted,  subject)
  })

  it('Quick sort doesnt ruin already sorted array',  function(){
      var unsorted = [10, 12, 14, 21]
      var sorted = [10, 12, 14, 21]

      subject = quickSort(unsorted)

      assert.deepEqual(sorted,  subject)
  })

  it('Quick sort can sort a large array',  function(){
      var unsorted = [11, 20, 56, 5, 92, 38, 92, 61, 47, 40,89, 39, 67, 78, 67,87, 53, 78, 36, 70,44, 77, 22, 73, 76,93, 34, 37, 78, 99,75, 87, 84, 8, 73,88, 54, 84, 60, 90,13, 46, 30, 72, 4,82, 77, 32, 68, 10,54, 67, 96, 81, 69,99, 98, 38, 15, 92,13, 21, 99, 61, 83,28, 6, 47, 69, 89,64, 94, 52, 3, 97,28, 54, 8, 53, 56,56, 90, 4, 70, 9,27, 59, 59, 79, 83,5, 71, 45, 39, 45,99, 6, 68, 70, 95,39, 69, 24, 40, 71,63, 52, 34, 40, 79,8, 11, 54, 80, 60,6, 37, 76, 22, 31,60, 46, 82, 92, 16,44, 30, 3, 55, 51,80, 83, 65, 13, 85,6, 26, 65, 81, 3,16, 91, 67, 30, 29,67, 51, 24, 41, 97,23, 27, 90, 53, 57,75, 6, 48, 40, 76,4, 24, 48, 2, 87,66, 64, 100, 7, 10,84, 20, 47, 89, 26,92, 41, 18, 49, 90,85, 88, 78, 87, 53,83, 4, 63, 58, 7,7, 18, 37, 85, 24,99, 55, 55, 73, 15,30, 59, 89, 55, 63,52, 83, 6, 20, 22,89, 10, 67, 14, 84,36, 4, 17, 27, 88,73, 50, 75, 78, 11,4, 10, 6, 31, 75,29, 90, 67, 15, 77,40, 82, 5, 11, 89,94, 71, 16, 45, 7,89, 59, 22, 64, 50,37, 42, 7, 90, 85,23, 69, 16, 37, 59,70, 75, 14, 52, 6,59, 76, 100, 31, 70,8, 3, 59, 19, 32,11, 57, 9, 4, 53,33, 61, 36, 80, 15,8, 13, 66, 63, 10,55, 44, 53, 63, 48,28, 42, 2, 69, 65,1, 3, 14, 87, 50,16, 14, 74, 29, 52,49, 90, 47, 35, 24,47, 54, 70, 71, 51,57, 68, 22, 2, 60,8, 65, 84, 12, 16,86, 47, 90, 39, 13,64, 78, 16, 33, 49,62, 87, 90, 74, 63,27, 60, 100, 54, 53,49, 1, 74, 48, 38,12, 94, 88, 54, 2,20, 27, 74, 6, 36,22, 97, 37, 12, 44,17, 88, 56, 66, 41,36, 64, 50, 10, 10,74, 42, 49, 47, 33,96, 34, 36, 5, 64,41, 23, 60, 85, 84,19, 19, 24, 85, 18,55, 49, 10, 49, 35,16, 64, 1, 44, 23,32, 7, 12, 46, 71,1, 100, 59, 93, 40,28, 37, 56, 61, 13,71, 51, 53, 87, 29,18, 9, 93, 49, 56,17, 76, 32, 79, 29,43, 83, 3, 89, 46,80, 48, 87, 41, 66,35, 82, 80, 76, 77,44, 48, 71, 71, 75,26, 93, 95, 12, 45,27, 50, 68, 20, 5,76, 41, 71, 3, 35,49, 14, 46, 2, 80,40, 82, 2, 52, 58,30, 79, 82, 58, 15,91, 70, 42, 49, 56,40, 76, 79, 100, 19]

      var sorted = [1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,8,8,8,8,8,8,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,12,12,12,12,12,13,13,13,13,13,13,14,14,14,14,14,15,15,15,15,15,16,16,16,16,16,16,16,16,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,20,21,22,22,22,22,22,22,23,23,23,23,24,24,24,24,24,24,26,26,26,27,27,27,27,27,27,28,28,28,28,29,29,29,29,29,30,30,30,30,30,31,31,31,32,32,32,32,33,33,33,34,34,34,35,35,35,35,36,36,36,36,36,36,37,37,37,37,37,37,37,38,38,38,39,39,39,39,40,40,40,40,40,40,40,40,41,41,41,41,41,41,42,42,42,42,43,44,44,44,44,44,44,45,45,45,45,46,46,46,46,46,47,47,47,47,47,47,47,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,51,51,51,51,52,52,52,52,52,52,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,55,55,55,55,55,55,56,56,56,56,56,56,56,57,57,57,58,58,58,59,59,59,59,59,59,59,59,60,60,60,60,60,60,61,61,61,61,62,63,63,63,63,63,63,64,64,64,64,64,64,64,65,65,65,65,66,66,66,66,67,67,67,67,67,67,67,68,68,68,68,69,69,69,69,69,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,71,72,73,73,73,73,74,74,74,74,74,75,75,75,75,75,75,76,76,76,76,76,76,76,76,77,77,77,77,78,78,78,78,78,78,79,79,79,79,79,80,80,80,80,80,80,81,81,82,82,82,82,82,82,83,83,83,83,83,83,84,84,84,84,84,84,85,85,85,85,85,85,86,87,87,87,87,87,87,87,87,88,88,88,88,88,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,91,91,92,92,92,92,92,93,93,93,93,94,94,94,95,95,96,96,97,97,97,98,99,99,99,99,99,100,100,100,100,100]

      subject = quickSort(unsorted)

      assert.deepEqual(sorted, subject)
  })


})
